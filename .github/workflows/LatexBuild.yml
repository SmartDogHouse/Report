# This is a basic workflow to help you get started with Actions
name: LateX Build
on:
  push:
    branches: [ main ]
    tags:
      - '**'
  workflow_dispatch:
jobs:
  BuildLatexJob:
    runs-on: ubuntu-20.04
    steps:
      - name: Setup Git repo
        uses: actions/checkout@v2
      - name: Compile LaTeX document
        uses: xu-cheng/latex-action@v2
        with:
          root_file: main.tex
          pre_compile: "tlmgr update --self --all"
          args: "-pdf -file-line-error -halt-on-error -interaction=nonstopmode -logfilewarninglist -Werror"
          post_compile: "latexmk -c"
      - name: Split log
        if: failure()
        shell: bash
        run: cat main.log | grep -n -E 'LaTeX Error|LaTeX Warning|Undefined' > small.log
      - name: Upload Logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: Logs
          path: |
            main.log
            small.log 
      - name: Print small log
        if: failure()
        shell: bash
        run: cat small.log >&2
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Artifacts
          path: main.pdf
          
  TelegramJobFailure:
      needs: [BuildLatexJob] #when finished this job
      if: failure() # if its failed
      runs-on: ubuntu-20.04
      steps:
      - name: Clone Repo with Checkout 
        uses: actions/checkout@v2 # clones repo! Action implemented in this repository, tag "2"
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Logs
      - name: Send custom Telegram message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
              ${{ github.event_name }} event,
                on github.com/${{ github.repository }}, 
                by ${{ github.actor }}:
                <b>${{ github.event.head_commit.message }}</b>
               ❌ <b>FAILED</b> ❌
          format: html
          disable_web_page_preview: true
          document: small.log
          
  TelegramJobSuccess:
        needs: [BuildLatexJob] #when finished this job
        if: success() #only on success
        runs-on: ubuntu-20.04
        steps:
        - name: Send custom Telegram message
          uses: appleboy/telegram-action@master
          with:
            to: ${{ secrets.TELEGRAM_TO }}
            token: ${{ secrets.TELEGRAM_TOKEN }}
            message: |
                ${{ github.event_name }} event,
                on github.com/${{ github.repository }}, 
                by ${{ github.actor }}:
                <b>${{ github.event.head_commit.message }}</b>
                ✅ <b>SUCCEDED</b>
            format: html
            disable_web_page_preview: true
            
  FindTagJob:
    needs: BuildLatexJob
    if: success()
    runs-on: ubuntu-20.04
    # Map a step output to a job output
    outputs:
      outputTagJob: ${{ steps.relese_msg.outputs.RELESE_NAME }}
    steps:
      - name: Clone Repo with Checkout 
        uses: actions/checkout@v2 # clones repo! Action implemented in this repository, tag "2"
      - name: Extract relese message if present
        shell: bash
        id: relese_msg
        run: |
          echo "::set-output name=RELESE_NAME::$(echo "${{github.event.head_commit.message}}" | grep -o -P '(?<=-TAG{).*(?=})')"
  
  DeployJob:
    needs: FindTagJob
    if: ${{ needs.FindTagJob.outputs.outputTagJob != '' }} #if environment variable is set
    runs-on: ubuntu-20.04
    steps:
      - name: Clone Repo with Checkout 
        uses: actions/checkout@v2 # clones repo! Action implemented in this repository, tag "2"
      - name: Extract relese message if present
        shell: bash
        id: relese_msg
        run: |
          echo "::set-output name=RELESE_NAME::$(echo "${{github.event.head_commit.message}}" | grep -o -P '(?<=-TAG{).*(?=})')"
      - name: Create relese if tag commit contain a tag message
        id: create_release
        if: ${{ steps.relese_msg.outputs.RELESE_NAME != '' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: ${{ steps.relese_msg.outputs.RELESE_NAME }}
          release_name: Release ${{ steps.relese_msg.outputs.RELESE_NAME }}
          draft: false
          prerelease: false
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Artifacts
      - name: Upload Release Asset
        if: success()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./main.pdf
          asset_name: main.pdf
          asset_content_type: Relese pdf

  EmailJob:
    needs: [DeployJob] #when finished this job
    if: success() 
    runs-on: ubuntu-20.04
    steps:
    - name: Clone Repo with Checkout # first step
      uses: actions/checkout@v2 # clones repo! Action implemented in this repository, tag "2"
    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        name: Artifacts
    - name: Send mail
      uses: dawidd6/action-send-mail@v3
      with:
        # Required mail server address:
        server_address: smtp.gmail.com
        # Required mail server port:
        server_port: 465
        # Required mail server username:
        username: ${{secrets.MAIL_USERNAME}}
        # Required mail server password:
        password: ${{secrets.MAIL_PASSWORD}}
        # Required mail subject:
        subject: Github Actions job result
        # Required recipients' addresses:
        to: ${{ secrets.MAIL_RECIPIENTS }}
        # Required sender full name (address can be skipped):
        from: SmartDoggo # <user@example.com>
        # Optional whether this connection use TLS (default is true if server_port is 465)
        secure: true
        # Optional plain body:
        body: Congrats! Release job of ${{github.repository}} SUCCESS! Document in the annexes.
        # Optional carbon copy recipients:
        cc: gxe23786@eoopy.com
        # Optional recipient of the email response:
        reply_to: ${{ secrets.MAIL_RECIPIENTS }}
        # Optional unsigned/invalid certificates allowance:
        ignore_cert: true
        # Optional converting Markdown to HTML (set content_type to text/html too):
        convert_markdown: true
        # Optional attachments:
        attachments: main.pdf

  TelegramJobDeploy:
      needs: [DeployJob] #when finished this job
      if: success() # if its failed
      runs-on: ubuntu-20.04
      steps:
      - name: Clone Repo with Checkout # first step
        uses: actions/checkout@v2 # clones repo! Action implemented in this repository, tag "2"
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Artifacts
      - name: Send custom Telegram message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
              **RELEASE**
              with commit: ${{github.event.head_commit.message}}
              on github.com/${{ github.repository }}.
          format: markdown
          disable_web_page_preview: true
          document: main.pdf
          
  PandocConverter:
    needs: DeployJob
    runs-on: ubuntu-20.04
    steps:
      - name: Clone git repo
        uses: actions/checkout@v2
      - name: Setup git repo 
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git fetch --all
      - name: Clone Pandoc dependency 
        run: |
          git clone https://github.com/SmartDogHouse/pandoc-uikit.git
      - name: Pandoc tex conversion
        uses: docker://pandoc/latex:2.9.0
        with:
          args: >-
            -s
            -i
            -N
            -f latex+smart+auto_identifiers 
            -t html5  
            --filter=pandoc-citeproc 
            --bibliography=./References.bib 
            --listings 
            --pdf-engine=pdflatex  
            --template=./pandoc-uikit/standalone.html
            --variable abstract="Abstract"
            --wrap=auto
            --mathjax 
            --toc 
            --toc-depth 2 
            -V template_css:./pandoc-uikit/uikit.css
            -V block-headings 
            -V theme:Warsaw 
            -V toc-title:"Table of Contents" 
            -V biblio-title:Whatever  
            -o ./index.html
            main.tex
            
      - name: Commit the new gh-pages html
        run: |
          rm -rdf pandoc-uikit/.git*
          rm -rdf Images
          rm -rdf DrawIo
          git checkout main DrawIo
          git checkout main Images
          git commit -m "Updated Resources"
          git add ./index.html
          git commit -m "Generated new index.html"
          git add ./pandoc-uikit/.
          git commit -m "Update pandoc dependency"
          git clean -f -d
          git checkout gh-pages
        
          if [[ -f ./index.html ]]
          then
            git rm ./index.html
            git commit -m 'Removed old index.html'
          fi
          
          if [[ -d "./pandoc-uikit/" ]]
          then
              git rm -r  ./pandoc-uikit/
              git commit -m 'Removed old pandoc dependency'
          fi
          git status
          git cherry-pick main~1
          git cherry-pick main
          git push
